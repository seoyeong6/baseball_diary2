{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "데이터 모델 및 서비스 설계 구현",
        "description": "야구팀, 감정, 기록, 스티커 데이터 모델과 로컬 DB 서비스 클래스 구현 (MVP)",
        "details": "1. 10개 KBO 구단 데이터 모델 생성 (팀명, 색상, 로고 포함) 2. DiaryEntry 모델 정의 (제목, 본문, 감정, 사진경로, 날짜) 3. Emotion enum 정의 (5-7개 감정 상태) 4. StickerData 모델 정의 5. DiaryService 클래스 구현 - LocalStorageService 사용 6. MVP로 로컬 저장만 구현 7. AuthService 연동은 향후 확장시 적용",
        "testStrategy": "각 모델의 toJson/fromJson 테스트, 서비스 클래스의 CRUD 동작 테스트, 네트워크 연결 없이 로컬 모드 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "KBO 구단 데이터 모델 생성",
            "description": "10개 KBO 구단의 팀명, 색상, 로고 정보를 포함한 Team 모델 생성",
            "dependencies": [],
            "details": "Team 클래스에 id, name, primaryColor, secondaryColor, logoPath 필드 포함. 10개 구단 데이터 상수로 정의",
            "status": "done"
          },
          {
            "id": 2,
            "title": "Emotion enum 정의",
            "description": "야구 일기에 사용할 5-7개 감정 상태 enum 정의",
            "dependencies": [],
            "details": "happy, excited, proud, neutral, sad, angry, disappointed 등 감정 상태 정의",
            "status": "done"
          },
          {
            "id": 3,
            "title": "DiaryEntry 모델 정의",
            "description": "일기 데이터를 저장할 DiaryEntry 모델 클래스 생성",
            "dependencies": [
              "1.2"
            ],
            "details": "id, title, content, emotion, imagePath, date, teamId 필드 포함. toJson/fromJson 메서드 구현",
            "status": "done"
          },
          {
            "id": 4,
            "title": "StickerData 모델 정의",
            "description": "캘린더에 표시할 스티커 데이터 모델 생성",
            "dependencies": [],
            "details": "id, type, date, position 필드를 포함한 StickerData 클래스 생성",
            "status": "done"
          },
          {
            "id": 5,
            "title": "LocalStorageService 구현",
            "description": "SharedPreferences를 사용한 로컬 데이터 저장 서비스 구현",
            "dependencies": [
              "1.3",
              "1.4"
            ],
            "details": "DiaryEntry와 StickerData의 로컬 저장/불러오기 CRUD 메서드 구현",
            "status": "done"
          },
          {
            "id": 6,
            "title": "FirebaseService 인터페이스 구현",
            "description": "Firestore와 연동할 서비스 클래스 인터페이스 구현",
            "dependencies": [
              "1.3",
              "1.4"
            ],
            "details": "FirebaseService 추상 클래스 정의 후 향후 Firestore 연동을 위한 메서드 시그니처 정의",
            "status": "done"
          },
          {
            "id": 7,
            "title": "DiaryService 통합 클래스 구현",
            "description": "로컬과 클라우드 저장을 선택적으로 사용하는 DiaryService 구현",
            "dependencies": [
              "1.5",
              "1.6"
            ],
            "details": "AuthService와 연동하여 로그인 상태에 따라 로컬/클라우드 저장 분기 처리",
            "status": "done"
          },
          {
            "id": 8,
            "title": "데이터 모델 단위 테스트 작성",
            "description": "생성된 모든 데이터 모델의 toJson/fromJson 테스트 작성",
            "dependencies": [
              "1.1",
              "1.2",
              "1.3",
              "1.4"
            ],
            "details": "각 모델의 직렬화/역직렬화 테스트 및 유효성 검증 테스트 작성",
            "status": "done"
          }
        ]
      },
      {
        "id": 2,
        "title": "구단 선택 화면 구현",
        "description": "최초 실행 시 나타나는 10개 KBO 구단 선택 UI와 로직 구현",
        "details": "1. TeamSelectionScreen 위젯 생성 2. 10개 KBO 구단 데이터와 색상/로고 에셋 추가 3. GridView.builder로 2x5 구단 선택 UI 구성 4. 각 구단 카드에 팀 색상과 로고 적용 5. 선택 시 애니메이션 효과 추가 6. 선택된 팀을 SharedPreferences에 저장 (MVP - 로컬만) 7. 최초 실행 여부 확인 로직 구현 8. main.dart에서 팀 선택 여부에 따른 화면 분기 처리",
        "testStrategy": "구단 선택 UI 렌더링 테스트, 저장/불러오기 기능 테스트, 최초 실행 감지 로직 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "TeamSelectionScreen 위젯 생성",
            "description": "구단 선택을 위한 화면 위젯 기본 구조 생성",
            "dependencies": [],
            "details": "StatefulWidget으로 TeamSelectionScreen 클래스 생성. lib/screens/ 디렉토리에 배치",
            "status": "done"
          },
          {
            "id": 2,
            "title": "구단 에셋 추가",
            "description": "10개 KBO 구단 로고 이미지를 assets에 추가",
            "dependencies": [],
            "details": "assets/images/teams/ 폴더에 각 구단별 로고 이미지 추가. pubspec.yaml에 assets 경로 등록",
            "status": "done"
          },
          {
            "id": 3,
            "title": "GridView 구단 선택 UI 구성",
            "description": "2x5 그리드 형태의 구단 선택 UI 구현",
            "dependencies": [
              "2.1",
              "2.2"
            ],
            "details": "GridView.builder로 각 구단 카드 표시. 팀 색상과 로고를 적용한 Card 위젯 구성",
            "status": "done"
          },
          {
            "id": 4,
            "title": "구단 선택 애니메이션 구현",
            "description": "구단 선택 시 시각적 피드백을 위한 애니메이션 추가",
            "dependencies": [
              "2.3"
            ],
            "details": "선택 시 크기 변화나 색상 변화 애니메이션. AnimatedContainer나 Hero 애니메이션 사용",
            "status": "done"
          },
          {
            "id": 5,
            "title": "선택된 팀 저장 기능 구현",
            "description": "선택된 구단을 로컬에 저장하는 기능 구현 (MVP - 로컬 저장만)",
            "dependencies": [
              "2.4"
            ],
            "details": "SharedPreferences로 선택된 teamId 저장. MVP로 로컬 저장만 구현",
            "status": "done"
          },
          {
            "id": 6,
            "title": "main.dart 앱 플로우 수정",
            "description": "최초 실행 시 팀 선택 화면으로 이동하는 로직 구현",
            "dependencies": [
              "2.5"
            ],
            "details": "main.dart에서 팀 선택 여부 확인 후 TeamSelection 또는 MainNavigation으로 분기",
            "status": "done"
          }
        ]
      },
      {
        "id": 3,
        "title": "캘린더 탭 UI 및 기능 구현",
        "description": "월간 캘린더 뷰와 일별 기록 표시, 스티커 기능이 포함된 캘린더 화면 구현",
        "details": "1. CalendarScreen 위젯 생성하여 main_navigation_screen.dart의 placeholder 교체 2. table_calendar: ^3.0.9 패키지 추가 3. TableCalendar 위젯으로 월간 캘린더 구현 4. 기록이 있는 날짜에 감정 아이콘 표시 5. 스티커 기능: 고정 아이콘 세트(별, 승리 표시, 직관 기호 등) 제공 6. 날짜 길게 누르기로 스티커 선택 모달 표시 7. 날짜 클릭 시 해당 기록 상세 페이지로 이동 8. CalendarController로 상태 관리 9. 선택한 팀 색상으로 캘린더 테마 적용",
        "testStrategy": "캘린더 렌더링 테스트, 기록 표시 로직 테스트, 스티커 저장/불러오기 테스트, 네비게이션 동작 테스트",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "table_calendar 패키지 추가",
            "description": "table_calendar 패키지를 pubspec.yaml에 추가",
            "dependencies": [],
            "details": "table_calendar: ^3.0.9 패키지 추가 및 flutter pub get 실행",
            "status": "done"
          },
          {
            "id": 2,
            "title": "CalendarScreen 위젯 생성",
            "description": "캘린더 화면 위젯 기본 구조 생성",
            "dependencies": [
              "3.1"
            ],
            "details": "StatefulWidget으로 CalendarScreen 생성. main_navigation_screen.dart placeholder 교체",
            "status": "done"
          },
          {
            "id": 3,
            "title": "월간 캘린더 UI 구현",
            "description": "TableCalendar 위젯으로 월간 캘린더 구현",
            "dependencies": [
              "3.2"
            ],
            "details": "TableCalendar 위젯 설정. 팀 색상 테마 적용. 기본 캘린더 기능 구현",
            "status": "done"
          },
          {
            "id": 4,
            "title": "기록 데이터 연동 및 감정 아이콘 표시",
            "description": "기록이 있는 날짜에 감정 아이콘 표시 기능 구현",
            "dependencies": [
              "3.3"
            ],
            "details": "DiaryService에서 날짜별 기록 조회. 감정에 따른 아이콘을 캘린더 날짜에 표시",
            "status": "in-progress"
          },
          {
            "id": 5,
            "title": "스티커 데이터 모델 및 UI 구현",
            "description": "캘린더 스티커 기능을 위한 UI 및 데이터 처리",
            "dependencies": [
              "3.4"
            ],
            "details": "고정 스티커 세트 정의. 날짜별 스티커 표시. 스티커 선택 모달 구현",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "날짜 클릭 네비게이션 구현",
            "description": "날짜 클릭 시 기록 상세보기로 이동하는 기능 구현",
            "dependencies": [
              "3.5"
            ],
            "details": "날짜 클릭 이벤트 처리. 해당 날짜 기록이 있으면 상세보기로, 없으면 작성화면으로 이동",
            "status": "pending"
          },
          {
            "id": 7,
            "title": "CalendarController 상태 관리 구현",
            "description": "캘린더 상태 관리를 위한 Controller 구현",
            "dependencies": [
              "3.6"
            ],
            "details": "캘린더 상태, 선택된 날짜, 스티커 상태 관리. Provider나 Riverpod으로 상태 관리",
            "status": "pending"
          }
        ]
      },
      {
        "id": 4,
        "title": "기록 작성 탭 구현",
        "description": "제목, 본문, 감정, 사진을 포함한 일기 작성 화면과 저장 기능 구현",
        "details": "1. RecordScreen 위젯 생성하여 main_navigation_screen.dart의 placeholder 교체 2. image_picker: ^1.0.4 패키지 추가 3. 제목 입력 TextField 4. 본문 입력 TextFormField (multiline) 5. 감정 선택 UI: 5-7개 감정을 가로 스크롤 가능한 Row로 배치 6. 사진 첨부 기능: ImagePicker로 갤러리에서 1장만 선택 7. 선택된 사진 미리보기와 삭제 기능 8. 저장 버튼과 유효성 검증 (제목 필수) 9. 저장 시 LocalStorageService를 통해 로컬 DB에 저장 (MVP) 10. path_provider로 이미지 로컬 저장 경로 관리",
        "testStrategy": "폼 유효성 검증 테스트, 이미지 선택/저장 테스트, 기록 저장 기능 테스트, 1장 제한 로직 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "필요한 패키지 추가",
            "description": "이미지 선택 및 경로 관리를 위한 패키지 추가",
            "dependencies": [],
            "details": "image_picker: ^1.0.4, path_provider 패키지를 pubspec.yaml에 추가",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "RecordScreen 위젯 생성",
            "description": "기록 작성 화면 위젯 기본 구조 생성",
            "dependencies": [
              "4.1"
            ],
            "details": "StatefulWidget으로 RecordScreen 생성. main_navigation_screen.dart placeholder 교체",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "제목/본문 입력 폼 구현",
            "description": "제목과 본문을 입력할 수 있는 TextField 구현",
            "dependencies": [
              "4.2"
            ],
            "details": "제목용 TextField와 multiline 본문용 TextFormField 구현. Form validation 설정",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "감정 선택 UI 구현",
            "description": "5-7개 감정을 가로 스크롤로 선택할 수 있는 UI 구현",
            "dependencies": [
              "4.3"
            ],
            "details": "감정별 아이콘과 텍스트가 있는 Card 위젯. SingleChildScrollView로 가로 스크롤 구현",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "사진 첨부 기능 구현",
            "description": "ImagePicker를 사용한 갤러리에서 사진 선택 기능 구현",
            "dependencies": [
              "4.4"
            ],
            "details": "ImagePicker로 갤러리에서 1장만 선택. 선택된 사진 미리보기 및 삭제 기능",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "유효성 검증 및 저장 기능 구현",
            "description": "폼 유효성 검증과 DiaryService를 통한 저장 기능 구현",
            "dependencies": [
              "4.5"
            ],
            "details": "제목 필수 입력 검증. path_provider로 이미지 저장. DiaryService를 통한 데이터 저장",
            "status": "pending"
          },
          {
            "id": 7,
            "title": "기록 작성 화면 테스트 작성",
            "description": "기록 작성 기능에 대한 단위 테스트 및 위젯 테스트 작성",
            "dependencies": [
              "4.6"
            ],
            "details": "폼 유효성 검증, 이미지 선택, 저장 기능에 대한 테스트 작성",
            "status": "pending"
          }
        ]
      },
      {
        "id": 5,
        "title": "기록 목록 탭 구현",
        "description": "작성된 일기들을 리스트 형태로 표시하고 정렬, 검색 기능을 포함한 화면 구현",
        "details": "1. DiaryListScreen 위젯 생성하여 main_navigation_screen.dart의 placeholder 교체 2. StreamBuilder 또는 FutureBuilder로 실시간 기록 목록 조회 3. ListView.builder로 기록 카드 리스트 구성 4. 각 카드에 썸네일 이미지, 감정 아이콘, 제목, 작성일 표시 5. 최신순/날짜순 정렬 옵션 추가 6. 당겨서 새로고침(pull-to-refresh) 기능 7. 카드 클릭 시 상세보기 화면으로 이동 8. 슬라이드로 삭제 기능 (Dismissible 위젯) 9. 빈 상태일 때 안내 메시지 표시",
        "testStrategy": "목록 렌더링 테스트, 정렬 기능 테스트, 삭제 동작 테스트, 빈 상태 UI 테스트",
        "priority": "medium",
        "dependencies": [
          1,
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "DiaryListScreen 위젯 생성",
            "description": "기록 목록을 표시할 화면 위젯 기본 구조 생성",
            "dependencies": [],
            "details": "StatefulWidget으로 DiaryListScreen 생성. main_navigation_screen.dart placeholder 교체",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "실시간 데이터 조회 구현",
            "description": "StreamBuilder 또는 FutureBuilder로 실시간 기록 목록 조회 기능 구현",
            "dependencies": [
              "5.1"
            ],
            "details": "DiaryService와 연동하여 실시간 데이터 스트림 구현. StreamBuilder로 UI 자동 업데이트",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "기록 카드 리스트 UI 구성",
            "description": "ListView.builder로 기록 카드 리스트 UI 구현",
            "dependencies": [
              "5.2"
            ],
            "details": "각 카드에 썸네일 이미지, 감정 아이콘, 제목, 작성일 표시. Card 위젯으로 일관된 디자인",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "정렬 및 필터 기능 구현",
            "description": "최신순/날짜순 정렬 옵션 및 필터 기능 추가",
            "dependencies": [
              "5.3"
            ],
            "details": "정렬 드롭다운 메뉴 추가. 날짜순/최신순 정렬 로직 구현. 감정별 필터링 옵션",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "상호작용 기능 구현",
            "description": "카드 클릭 네비게이션 및 슬라이드 삭제 기능 구현",
            "dependencies": [
              "5.4"
            ],
            "details": "카드 클릭 시 상세보기 화면으로 이동. Dismissible 위젯으로 슬라이드 삭제 기능",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "추가 UX 기능 구현",
            "description": "pull-to-refresh 및 빈 상태 처리 구현",
            "dependencies": [
              "5.5"
            ],
            "details": "RefreshIndicator로 당겨서 새로고침 구현. 빈 상태일 때 안내 메시지 및 일러스트 표시",
            "status": "pending"
          }
        ]
      },
      {
        "id": 6,
        "title": "기록 상세보기 및 수정 화면 구현",
        "description": "선택된 일기의 상세 내용 표시와 수정 기능이 포함된 화면 구현",
        "details": "1. DiaryDetailScreen 위젯 생성 2. 기록 ID를 받아 상세 정보 표시 3. 제목, 본문, 감정, 사진을 읽기 전용으로 표시 4. 편집 모드 전환 기능 5. 편집 모드에서 RecordScreen과 동일한 UI 제공 6. 수정 완료 시 DiaryService를 통해 업데이트 7. 삭제 확인 다이얼로그와 삭제 기능 8. 뒤로가기 시 변경사항 저장 여부 확인 9. 사진 확대보기 기능 (Hero 애니메이션 적용)",
        "testStrategy": "상세정보 표시 테스트, 편집 모드 전환 테스트, 수정/삭제 기능 테스트, 사진 확대 기능 테스트",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "DiaryDetailScreen 위젯 생성",
            "description": "기록 상세보기 화면 위젯 기본 구조 생성",
            "dependencies": [],
            "details": "StatefulWidget으로 DiaryDetailScreen 생성. 기록 ID를 매개변수로 받는 구조",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "상세 정보 표시 UI 구현",
            "description": "제목, 본문, 감정, 사진을 읽기 전용으로 표시하는 UI 구현",
            "dependencies": [
              "6.1"
            ],
            "details": "기록 데이터를 받아 제목, 본문, 감정, 사진을 읽기 전용 형태로 표시",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "편집 모드 전환 기능 구현",
            "description": "읽기 모드와 편집 모드 간 전환 기능 구현",
            "dependencies": [
              "6.2"
            ],
            "details": "편집 버튼 추가. 편집 모드에서 RecordScreen과 동일한 UI 제공",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "수정 및 삭제 기능 구현",
            "description": "기록 수정 완료 및 삭제 확인 기능 구현",
            "dependencies": [
              "6.3"
            ],
            "details": "수정 완료 시 DiaryService를 통해 업데이트. 삭제 확인 다이얼로그 추가",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "내비게이션 및 변경사항 처리",
            "description": "뒤로가기 시 변경사항 저장 여부 확인 기능 구현",
            "dependencies": [
              "6.4"
            ],
            "details": "WillPopScope로 뒤로가기 처리. 변경사항 있을 때 저장 여부 확인 다이얼로그",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "사진 확대보기 기능 구현",
            "description": "사진 클릭 시 확대보기 기능 및 Hero 애니메이션 구현",
            "dependencies": [
              "6.5"
            ],
            "details": "사진 클릭 시 PhotoViewGallery나 InteractiveViewer로 확대보기. Hero 애니메이션 적용",
            "status": "pending"
          }
        ]
      },
      {
        "id": 7,
        "title": "통계 탭 및 차트 구현",
        "description": "감정 데이터 기반 시각화와 팀별 기록 통계를 보여주는 화면 구현",
        "details": "1. StatisticsScreen 위젯 생성하여 main_navigation_screen.dart의 placeholder 교체 2. fl_chart: ^0.66.2 패키지 추가 3. 감정별 비율 파이 차트 구현 4. 기간별(월별) 기분 변화 라인 차트 구현 5. 총 기록 수, 이번 달 기록 수 등 요약 통계 표시 6. 선택한 팀 색상을 차트 테마에 적용 7. 기간 필터 기능 (최근 1개월, 3개월, 1년) 8. 차트 데이터 캐싱으로 성능 최적화 9. 데이터가 없을 때 안내 메시지 표시",
        "testStrategy": "차트 렌더링 테스트, 데이터 집계 로직 테스트, 필터 기능 테스트, 빈 데이터 상태 테스트",
        "priority": "medium",
        "dependencies": [
          1,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "fl_chart 패키지 추가",
            "description": "fl_chart 패키지를 pubspec.yaml에 추가",
            "dependencies": [],
            "details": "fl_chart: ^0.66.2 패키지 추가 및 flutter pub get 실행",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "StatisticsScreen 위젯 생성",
            "description": "통계 화면 위젯 기본 구조 생성",
            "dependencies": [
              "7.1"
            ],
            "details": "StatefulWidget으로 StatisticsScreen 생성. main_navigation_screen.dart placeholder 교체",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "감정별 파이 차트 구현",
            "description": "감정별 비율을 나타내는 파이 차트 구현",
            "dependencies": [
              "7.2"
            ],
            "details": "PieChart 위젯으로 감정별 데이터 비율 시각화. 팀 색상 테마 적용",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "기간별 라인 차트 구현",
            "description": "기간별 기분 변화를 나타내는 라인 차트 구현",
            "dependencies": [
              "7.3"
            ],
            "details": "LineChart 위젯으로 월별 기분 변화 시각화. 데이터 집계 로직 구현",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "요약 통계 정보 표시",
            "description": "총 기록 수, 이번 달 기록 수 등 요약 통계 표시",
            "dependencies": [
              "7.4"
            ],
            "details": "Card 위젯으로 주요 통계 지표 표시. 전체/월별 기록 수 집계",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "기간 필터 및 캐싱 기능 구현",
            "description": "기간 필터 기능과 차트 데이터 캐싱 기능 구현",
            "dependencies": [
              "7.5"
            ],
            "details": "최근 1개월, 3개월, 1년 필터. 차트 데이터 캐싱으로 성능 최적화",
            "status": "pending"
          },
          {
            "id": 7,
            "title": "빈 데이터 상태 처리",
            "description": "데이터가 없을 때 안내 메시지 표시 기능 구현",
            "dependencies": [
              "7.6"
            ],
            "details": "데이터가 없을 때 안내 메시지 및 일러스트레이션 표시",
            "status": "pending"
          }
        ]
      },
      {
        "id": 8,
        "title": "설정 탭 구현",
        "description": "다크모드 전환, 응원팀 변경, 데이터 관리 기능이 포함된 설정 화면 구현",
        "details": "1. SettingsScreen 위젯 생성하여 main_navigation_screen.dart의 placeholder 교체 2. 다크모드 on/off 토글 스위치 추가 3. 현재 선택된 응원팀 표시 및 변경 기능 4. 팀 변경 시 TeamSelectionScreen 재사용 5. 데이터 백업/내보내기 기능 (JSON 형태) 6. 앱 정보 (버전, 개발자 정보) 표시 7. 로그아웃 기능 (AuthService 연동) 8. 설정 변경사항 즉시 반영 9. share_plus: ^7.2.1 패키지로 데이터 내보내기 구현",
        "testStrategy": "설정 저장/불러오기 테스트, 다크모드 전환 테스트, 팀 변경 기능 테스트, 데이터 내보내기 테스트",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "SettingsScreen 위젯 생성",
            "description": "설정 화면 위젯 기본 구조 생성",
            "dependencies": [],
            "details": "StatefulWidget으로 SettingsScreen 생성. main_navigation_screen.dart placeholder 교체",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "다크모드 토글 기능 구현",
            "description": "완전한 다크모드 시스템 구현 - 테마 상태 관리, 저장/불러오기, 시스템 테마 감지 포함",
            "dependencies": [
              "8.1"
            ],
            "details": "1. ThemeProvider 또는 ThemeNotifier 상태 관리 클래스 구현 2. 라이트/다크 ColorScheme을 기존 themes.dart에 정의 3. SharedPreferences로 테마 설정 저장/불러오기 4. 시스템 테마 변경 감지 (MediaQuery.platformBrightnessOf) 5. MaterialApp에서 테마 동적 적용 6. 설정 화면에 토글 스위치 UI 구현 7. 테마 변경 시 즉시 앱 전체 반영",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "응원팀 변경 기능 구현",
            "description": "현재 선택된 응원팀 표시 및 변경 기능 구현",
            "dependencies": [
              "8.2"
            ],
            "details": "현재 팀 표시. 팀 변경 시 TeamSelectionScreen 재사용. 변경 사항 저장",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "데이터 백업/내보내기 기능 구현",
            "description": "데이터를 JSON 형태로 백업/내보내기 기능 구현",
            "dependencies": [
              "8.3"
            ],
            "details": "share_plus: ^7.2.1 패키지로 데이터 내보내기. JSON 형태로 전체 데이터 직렬화",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "앱 정보 및 로그아웃 기능 구현",
            "description": "앱 버전, 개발자 정보 표시 및 로그아웃 기능 추가",
            "dependencies": [
              "8.4"
            ],
            "details": "앱 버전, 개발자 정보 표시. AuthService 연동하여 로그아웃 기능 구현",
            "status": "pending"
          }
        ]
      },
      {
        "id": 9,
        "title": "Firebase 설정 및 클라우드 동기화 구현",
        "description": "Firebase Firestore 설정과 로그인 사용자 데이터 클라우드 저장 기능 구현",
        "details": "1. firebase_core: ^2.24.2, cloud_firestore: ^4.13.6 패키지 추가 2. Firebase 프로젝트 생성 및 Android/iOS 설정 3. Firestore 데이터베이스 생성 및 보안 규칙 설정 4. 컬렉션 구조 설계: users/{userId}/diaries/{diaryId} 5. FirestoreService 클래스에서 CRUD 작업 구현 6. 로그인 사용자는 클라우드, 비로그인은 로컬 저장 분기 처리 7. 네트워크 연결 상태 확인 및 오프라인 지원 8. 데이터 동기화 충돌 해결 로직 9. firebase_storage로 이미지 업로드 기능 구현",
        "testStrategy": "Firebase 연결 테스트, Firestore CRUD 테스트, 오프라인 모드 테스트, 이미지 업로드 테스트",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "deferred",
        "subtasks": [
          {
            "id": 1,
            "title": "Firebase 패키지 추가",
            "description": "Firebase 관련 패키지들을 pubspec.yaml에 추가",
            "dependencies": [],
            "details": "firebase_core: ^2.24.2, cloud_firestore: ^4.13.6, firebase_storage 패키지 추가",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Firebase 프로젝트 설정",
            "description": "Firebase 프로젝트 생성 및 Android/iOS 설정",
            "dependencies": [
              "9.1"
            ],
            "details": "Firebase 콘솔에서 프로젝트 생성. google-services.json 및 GoogleService-Info.plist 설정",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "Firestore 데이터베이스 설정",
            "description": "Firestore 데이터베이스 생성 및 보안 규칙 설정",
            "dependencies": [
              "9.2"
            ],
            "details": "Firestore 데이터베이스 생성. 컴렉션 구조 설계: users/{userId}/diaries/{diaryId}",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "FirestoreService CRUD 작업 구현",
            "description": "FirestoreService 클래스에서 CRUD 작업 구현",
            "dependencies": [
              "9.3"
            ],
            "details": "Firestore에서 데이터 생성, 읽기, 업데이트, 삭제 기능 구현",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "로그인/비로그인 데이터 저장 분기 처리",
            "description": "로그인 사용자는 클라우드, 비로그인은 로컬 저장 분기 처리",
            "dependencies": [
              "9.4"
            ],
            "details": "AuthService와 연동하여 로그인 상태에 따른 데이터 저장 방식 분기",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "네트워크 연결 상태 및 오프라인 지원",
            "description": "네트워크 연결 상태 확인 및 오프라인 지원 기능 구현",
            "dependencies": [
              "9.5"
            ],
            "details": "connectivity_plus 패키지로 네트워크 상태 확인. 오프라인 시 로컬 저장만 사용",
            "status": "pending"
          },
          {
            "id": 7,
            "title": "데이터 동기화 및 충돌 해결",
            "description": "데이터 동기화 및 충돌 해결 로직 구현",
            "dependencies": [
              "9.6"
            ],
            "details": "로컬과 클라우드 데이터 동기화. 충돌 시 해결 로직 및 사용자 선택 옵션",
            "status": "pending"
          },
          {
            "id": 8,
            "title": "이미지 업로드 기능 구현",
            "description": "Firebase Storage로 이미지 업로드 기능 구현",
            "dependencies": [
              "9.7"
            ],
            "details": "firebase_storage로 이미지 클라우드 업로드. 이미지 URL 및 로컬 이미지 경로 관리",
            "status": "pending"
          }
        ]
      },
      {
        "id": 10,
        "title": "성능 최적화 및 캐싱 구현",
        "description": "앱 성능 향상을 위한 이미지 캐싱, 데이터 캐싱, 메모리 관리 최적화 구현",
        "details": "1. cached_network_image: ^3.3.1 패키지로 이미지 캐싱 구현 2. 기록 목록 페이지네이션 (20개씩 로드) 3. 통계 데이터 캐싱 (hive: ^2.2.3 패키지 사용) 4. 메모리 누수 방지를 위한 dispose 메소드 구현 5. 이미지 압축 및 리사이징 (flutter_image_compress 패키지) 6. LazyLoading으로 대용량 리스트 성능 개선 7. 불필요한 위젯 리빌드 방지 (const 키워드 적극 활용) 8. 데이터베이스 인덱스 최적화",
        "testStrategy": "200개 이상 기록에서 성능 테스트, 메모리 사용량 모니터링, 이미지 로딩 속도 테스트",
        "priority": "low",
        "dependencies": [
          4,
          5,
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "성능 최적화 패키지 추가",
            "description": "성능 최적화를 위한 패키지들을 pubspec.yaml에 추가",
            "dependencies": [],
            "details": "cached_network_image: ^3.3.1, hive: ^2.2.3, flutter_image_compress 패키지 추가",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "이미지 캐싱 및 압축 기능 구현",
            "description": "이미지 캐싱과 압축 기능으로 성능 향상",
            "dependencies": [
              "10.1"
            ],
            "details": "CachedNetworkImage로 이미지 캐싱. flutter_image_compress로 이미지 압축 및 리사이징",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "기록 목록 페이지네이션 구현",
            "description": "기록 목록을 20개씩 로드하는 페이지네이션 구현",
            "dependencies": [
              "10.2"
            ],
            "details": "LazyLoading으로 대용량 리스트 성능 개선. 20개씩 데이터 로드",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "데이터 캐싱 시스템 구현",
            "description": "Hive를 사용한 통계 데이터 캐싱 기능 구현",
            "dependencies": [
              "10.3"
            ],
            "details": "Hive 패키지로 통계 데이터 로컬 캐싱. 캐시 무효화 로직 포함",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "메모리 누수 방지 및 위젯 최적화",
            "description": "메모리 누수 방지를 위한 dispose 메소드 및 위젯 최적화",
            "dependencies": [
              "10.4"
            ],
            "details": "모든 Controller dispose 구현. const 키워드 적극 활용. 불필요한 위젯 리빌드 방지",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "데이터베이스 인덱스 최적화",
            "description": "데이터베이스 인덱스 최적화로 쿼리 성능 향상",
            "dependencies": [
              "10.5"
            ],
            "details": "Firestore 컴포지트 인덱스 설정. 날짜별, 감정별 쿼리 최적화",
            "status": "pending"
          }
        ]
      },
      {
        "id": 11,
        "title": "UI/UX 향상 및 애니메이션 구현",
        "description": "사용자 경험 향상을 위한 애니메이션, 트랜지션, 마이크로 인터랙션 구현",
        "details": "1. 페이지 전환 애니메이션 (PageRoute transitions) 2. 감정 선택 시 바운스 애니메이션 3. 기록 카드 호버/터치 피드백 효과 4. 로딩 상태 시마/스켈레톤 UI 구현 5. 성공/실패 스낵바 메시지 추가 6. 스티커 추가 시 확대/축소 애니메이션 7. 당겨서 새로고침 커스텀 애니메이션 8. 다크모드 전환 애니메이션 9. 빈 상태 일러스트레이션 추가 10. 햅틱 피드백 (vibration: ^1.8.4 패키지)",
        "testStrategy": "애니메이션 성능 테스트, 사용자 인터랙션 반응성 테스트, 다양한 기기에서 UI 일관성 테스트",
        "priority": "low",
        "dependencies": [
          3,
          4,
          5,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "vibration 패키지 추가",
            "description": "햄틱 피드백을 위한 vibration 패키지 추가",
            "dependencies": [],
            "details": "vibration: ^1.8.4 패키지를 pubspec.yaml에 추가",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "페이지 전환 애니메이션 구현",
            "description": "PageRoute transitions로 페이지 전환 애니메이션 구현",
            "dependencies": [
              "11.1"
            ],
            "details": "Custom PageRoute로 페이지 전환 애니메이션. Slide, Fade 효과 적용",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "감정 선택 및 상호작용 애니메이션 구현",
            "description": "감정 선택 시 바운스 애니메이션 및 터치 피드백 구현",
            "dependencies": [
              "11.2"
            ],
            "details": "감정 선택 시 AnimatedScale 바운스 효과. 기록 카드 터치 피드백 효과",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "로딩 상태 시마 UI 구현",
            "description": "로딩 상태 시마/스켈레톤 UI 구현",
            "dependencies": [
              "11.3"
            ],
            "details": "Shimmer 효과로 로딩 상태 시마 UI. 리스트 및 상세 페이지 스켈레톤",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "스낵바 및 알림 메시지 기능 구현",
            "description": "성공/실패 스낵바 메시지 및 알림 기능 추가",
            "dependencies": [
              "11.4"
            ],
            "details": "SnackBar로 사용자 피드백 메시지. 성공/에러 상태에 따른 다른 스타일링",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "스티커 및 다크모드 애니메이션 구현",
            "description": "스티커 추가 시 확대/축소 애니메이션 및 다크모드 전환 애니메이션 구현",
            "dependencies": [
              "11.5"
            ],
            "details": "스티커 추가 시 AnimatedScale 효과. 다크모드 전환 시 AnimatedTheme 전환",
            "status": "pending"
          },
          {
            "id": 7,
            "title": "빈 상태 UI 및 당겨서 새로고침 애니메이션",
            "description": "빈 상태 일러스트레이션과 커스텀 pull-to-refresh 애니메이션 구현",
            "dependencies": [
              "11.6"
            ],
            "details": "빈 상태 일러스트레이션 추가. 커스텀 RefreshIndicator 애니메이션",
            "status": "pending"
          },
          {
            "id": 8,
            "title": "햄틱 피드백 기능 구현",
            "description": "사용자 상호작용 시 햄틱 피드백 기능 추가",
            "dependencies": [
              "11.7"
            ],
            "details": "vibration 패키지로 버튼 클릭, 성공/에러 상황에서 햄틱 피드백 추가",
            "status": "pending"
          }
        ]
      },
      {
        "id": 12,
        "title": "최종 테스트 및 배포 준비",
        "description": "전체 앱 통합 테스트, 버그 수정, 스토어 배포를 위한 최종 준비 작업",
        "details": "1. 전체 기능 통합 테스트 시나리오 작성 및 실행 2. Android/iOS 실기기 테스트 3. 다양한 화면 크기 대응 확인 4. 접근성 기능 추가 (시맨틱 레이블, 색상 대비) 5. 앱 아이콘 및 스플래시 화면 디자인 6. 플레이스토어/앱스토어 메타데이터 작성 7. 개인정보 처리방침 페이지 추가 8. 프로덕션 Firebase 설정 분리 9. ProGuard/R8 난독화 설정 10. 최종 성능 프로파일링 및 최적화 11. 버전 관리 및 릴리스 노트 작성",
        "testStrategy": "E2E 테스트 자동화, 다양한 시나리오별 수동 테스트, 성능 지표 측정, 보안 취약점 점검",
        "priority": "high",
        "dependencies": [
          8,
          9,
          10,
          11
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "통합 테스트 시나리오 작성",
            "description": "전체 기능 통합 테스트 시나리오 작성 및 실행",
            "dependencies": [],
            "details": "E2E 테스트 시나리오 작성. 전체 사용자 플로우 테스트 자동화",
            "status": "pending"
          },
          {
            "id": 2,
            "title": "Android/iOS 실기기 테스트",
            "description": "다양한 Android/iOS 실기기에서 테스트 실행",
            "dependencies": [
              "12.1"
            ],
            "details": "다양한 기기 및 화면 크기에서 테스트. 성능 및 사용성 테스트",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "접근성 기능 추가",
            "description": "접근성 기능 추가 (시맨틱 레이블, 색상 대비)",
            "dependencies": [
              "12.2"
            ],
            "details": "Semantics 위젯으로 시맨틱 레이블 추가. 색상 대비 검증 및 개선",
            "status": "pending"
          },
          {
            "id": 4,
            "title": "앱 아이콘 및 스플래시 화면 디자인",
            "description": "앱 아이콘 및 스플래시 화면 디자인 및 적용",
            "dependencies": [
              "12.3"
            ],
            "details": "flutter_launcher_icons로 액 아이콘 생성. flutter_native_splash로 스플래시 화면 설정",
            "status": "pending"
          },
          {
            "id": 5,
            "title": "스토어 메타데이터 작성",
            "description": "플레이스토어/앱스토어 메타데이터 작성",
            "dependencies": [
              "12.4"
            ],
            "details": "앱 설명, 스크린샷, 키워드 작성. 개인정보 처리방침 페이지 추가",
            "status": "pending"
          },
          {
            "id": 6,
            "title": "프로덕션 Firebase 설정 및 난독화",
            "description": "프로덕션 Firebase 설정 분리 및 ProGuard/R8 난독화 설정",
            "dependencies": [
              "12.5"
            ],
            "details": "개발/프로덕션 Firebase 설정 분리. ProGuard/R8 난독화 설정 추가",
            "status": "pending"
          },
          {
            "id": 7,
            "title": "최종 성능 프로파일링 및 최적화",
            "description": "최종 성능 프로파일링 및 최적화 작업",
            "dependencies": [
              "12.6"
            ],
            "details": "Flutter DevTools로 성능 프로파일링. 메모리 누수 및 성능 병목 현상 해결",
            "status": "pending"
          },
          {
            "id": 8,
            "title": "버전 관리 및 릴리스 노트 작성",
            "description": "버전 관리 및 릴리스 노트 작성",
            "dependencies": [
              "12.7"
            ],
            "details": "pubspec.yaml 버전 업데이트. CHANGELOG.md 릴리스 노트 작성",
            "status": "pending"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-28T19:45:41.346Z",
      "updated": "2025-08-31T05:08:12.194Z",
      "description": "Tasks for master context"
    }
  }
}